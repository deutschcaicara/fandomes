import os
from dotenv import load_dotenv

load_dotenv()

MONGO_URI = os.getenv("MONGO_URI")
STRIPE_SECRET_KEY = os.getenv("STRIPE_SECRET_KEY")
STRIPE_WEBHOOK_SECRET = os.getenv("STRIPE_WEBHOOK_SECRET")
OLLAMA_URL = os.getenv("OLLAMA_URL")
API_KEY = os.getenv("API_KEY")
from fastapi import FastAPI
from app.routes import whatsapp, ia, stripe, agendamento, painel

app = FastAPI(title="FAMDOMES API")

# Ajuste aqui para respeitar padrão do WhatsApp Cloud
app.include_router(whatsapp.router, prefix="/chat")

app.include_router(ia.router, prefix="/ia")
app.include_router(stripe.router, prefix="/pagamento")
app.include_router(agendamento.router, prefix="/agenda")
app.include_router(painel.router, prefix="/paciente")
from pydantic import BaseModel

class MensagemIA(BaseModel):
    mensagem: str
    paciente_id: str
    canal: str
INTENTS = {
    "ver_agendamento": ["consulta", "marcada", "quando", "horário"],
    "confirmar_pagamento": ["paguei", "comprei", "recebi", "cadê"],
    "cancelar_atendimento": ["cancelar", "desistir"],
    "preciso_ajuda": ["socorro", "urgente", "não aguento"],
    "duvida_geral": ["funciona", "o que é", "como"]
}
from pydantic import BaseModel

class PagamentoRequest(BaseModel):
    produto_id: str
    email: str
    telefone: str
    redirect_url: str
from fastapi import APIRouter

router = APIRouter()

@router.post("/solicitar")
async def solicitar_agendamento():
    # TODO: Chamar n8n para criar evento no Google Calendar
    return {"status": "agendamento iniciado"}
from fastapi import APIRouter
from app.models.atendimento import MensagemIA
from app.utils.risco import analisar_risco
from app.utils.ollama import chamar_ollama

router = APIRouter()

@router.post("/perguntar")
async def perguntar_ia(mensagem: MensagemIA):
    resposta = await chamar_ollama(mensagem.mensagem)
    risco = analisar_risco(resposta)
    return {
        "resposta": resposta,
        "risco_detectado": risco,
        "paciente_id": mensagem.paciente_id
    }
from fastapi import APIRouter

router = APIRouter()

@router.get("/consulta/{token}")
async def status_consulta(token: str):
    # TODO: Buscar status com base no token ou sessão
    return {
        "token": token,
        "status": "confirmado",
        "mensagem": "Sua sessão está confirmada com um profissional."
    }
from fastapi import APIRouter, Request
from app.models.pagamentos import PagamentoRequest
import stripe
from app.config import STRIPE_SECRET_KEY, STRIPE_WEBHOOK_SECRET

stripe.api_key = STRIPE_SECRET_KEY
router = APIRouter()

@router.post("/criar_sessao")
async def criar_sessao_pagamento(dados: PagamentoRequest):
    session = stripe.checkout.Session.create(
        payment_method_types=["card"],
        line_items=[{
            "price": dados.produto_id,
            "quantity": 1,
        }],
        mode="payment",
        success_url=dados.redirect_url,
        cancel_url=dados.redirect_url,
        metadata={
            "telefone": dados.telefone,
            "email": dados.email
        }
    )
    return {"checkout_url": session.url}

@router.post("/webhook")
async def stripe_webhook(request: Request):
    payload = await request.body()
    sig_header = request.headers.get("stripe-signature")

    try:
        event = stripe.Webhook.construct_event(
            payload, sig_header, STRIPE_WEBHOOK_SECRET
        )
    except Exception as e:
        return {"erro": str(e)}

    if event["type"] == "checkout.session.completed":
        session = event["data"]["object"]
        telefone = session["metadata"].get("telefone")
        # TODO: Disparar n8n + atualizar MongoDB com status
        return {"status": "confirmado", "telefone": telefone}

    return {"status": "ignorado"}
from fastapi import APIRouter, Request
from app.models.intents import INTENTS

router = APIRouter()

def detectar_intent(texto: str) -> str:
    for intent, gatilhos in INTENTS.items():
        if any(g.lower() in texto.lower() for g in gatilhos):
            return intent
    return "desconhecida"

@router.post("/webhook/whatsapp/")
async def receber_mensagem_whatsapp(request: Request):
    data = await request.json()
    mensagem = data.get("mensagem", "")
    telefone = data.get("telefone", "")

    intent = detectar_intent(mensagem)

    return {
        "telefone": telefone,
        "mensagem": mensagem,
        "intent_detectada": intent
    }
import httpx
from app.config import OLLAMA_URL

async def chamar_ollama(prompt: str) -> str:
    async with httpx.AsyncClient() as client:
        response = await client.post(f"{OLLAMA_URL}/api/generate", json={"prompt": prompt})
        data = response.json()
        return data.get("response", "")
def analisar_risco(texto: str) -> bool:
    palavras_criticas = ["suicídio", "morrer", "não aguento", "acabar com tudo"]
    return any(p in texto.lower() for p in palavras_criticas)
