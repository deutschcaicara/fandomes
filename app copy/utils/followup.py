# ===========================================================
# Arquivo: utils/followup.py
# (Implementa√ß√£o das fun√ß√µes de acompanhamento de pagamento)
# ===========================================================
from datetime import datetime, timezone
from pymongo import MongoClient, ReturnDocument
from pymongo.errors import ConnectionFailure
# Ajuste o import se config.py estiver em um diret√≥rio diferente
from app.config import MONGO_URI
# Importa a fun√ß√£o de agendamento para ser chamada ap√≥s o pagamento
# Ajuste o import se agenda.py estiver em um diret√≥rio diferente
from app.utils.agenda import agendar_consulta, formatar_horario_local
import logging

# Configura√ß√£o b√°sica de logging
# logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# --- Conex√£o com MongoDB ---
mongo_followup = None
db_followup = None
pagamentos_db = None # Cole√ß√£o para rastrear status de pagamento

try:
    # Estabelece conex√£o com MongoDB
    if MONGO_URI:
        mongo_followup = MongoClient(MONGO_URI, serverSelectionTimeoutMS=5000)
        mongo_followup.server_info() # Testa a conex√£o
        db_followup = mongo_followup["famdomes"] # Nome do banco de dados
        pagamentos_db = db_followup["pagamentos"] # Cole√ß√£o para pagamentos
        # Cria √≠ndices se n√£o existirem
        pagamentos_db.create_index("telefone")
        pagamentos_db.create_index("id_sessao_stripe", sparse=True, unique=True) # ID da sess√£o deve ser √∫nico
        pagamentos_db.create_index("status")
        pagamentos_db.create_index("criado_em")
        logging.info("FOLLOWUP: Conex√£o com MongoDB estabelecida para Pagamentos.")
    else:
        logging.error("FOLLOWUP: ‚ùå MONGO_URI n√£o definido. N√£o foi poss√≠vel conectar ao MongoDB.")
except ConnectionFailure as e:
     logging.error(f"FOLLOWUP: ‚ùå Falha na conex√£o com MongoDB: {e}")
except Exception as e:
    logging.error(f"FOLLOWUP: ‚ùå ERRO ao conectar com MongoDB ou criar √≠ndices: {e}")
    mongo_followup = None
    db_followup = None
    pagamentos_db = None

# --- Fun√ß√µes de Follow-up ---

def iniciar_sessao(telefone: str, nome: str, id_sessao_stripe: str | None = None):
    """
    Registra o in√≠cio de uma tentativa de pagamento no banco de dados.
    Chamado quando o link de pagamento √© gerado. Usa update_one com upsert=True
    para criar ou atualizar o registro baseado no id_sessao_stripe, se fornecido.

    Args:
        telefone (str): Telefone do usu√°rio.
        nome (str): Nome do usu√°rio.
        id_sessao_stripe (str | None): ID da sess√£o de checkout do Stripe.
    """
    if pagamentos_db is None:
        logging.error("FOLLOWUP: ‚ùå Falha ao iniciar sess√£o: DB indispon√≠vel.")
        return

    try:
        agora = datetime.now(timezone.utc)
        # Filtro: usa id_sessao_stripe se dispon√≠vel, sen√£o cria um novo (ou atualiza baseado em telefone?)
        # √â mais seguro basear no id_sessao_stripe para evitar sobrescrever sess√µes ativas
        filtro = {"id_sessao_stripe": id_sessao_stripe} if id_sessao_stripe else {"telefone": telefone, "status": "link_gerado"} # Se sem ID, atualiza √∫ltimo link gerado

        update_data = {
            "$set": {
                "telefone": telefone,
                "nome": nome,
                "status": "link_gerado", # Garante o status correto
                "ultima_atualizacao": agora
            },
            "$setOnInsert": { # Define apenas na cria√ß√£o
                 "id_sessao_stripe": id_sessao_stripe, # S√≥ define ID na cria√ß√£o se filtro n√£o o usou
                 "criado_em": agora
            }
        }
        # Se o filtro usou id_sessao_stripe, garante que ele seja definido no $set tamb√©m
        if id_sessao_stripe:
            update_data["$set"]["id_sessao_stripe"] = id_sessao_stripe


        result = pagamentos_db.update_one(filtro, update_data, upsert=True)

        if result.upserted_id:
            logging.info(f"FOLLOWUP: üìç Nova sess√£o de pagamento iniciada para {telefone} ({nome}). Sess√£o: {id_sessao_stripe or 'N/A'}.")
        elif result.modified_count > 0:
             logging.info(f"FOLLOWUP: üìç Sess√£o de pagamento atualizada para {telefone} ({nome}). Sess√£o: {id_sessao_stripe or 'N/A'}.")
        else:
             logging.info(f"FOLLOWUP: üìç Sess√£o de pagamento para {telefone} ({nome}) n√£o modificada (Sess√£o: {id_sessao_stripe or 'N/A'}).")

    except Exception as e:
        logging.exception(f"FOLLOWUP: ‚ùå ERRO ao iniciar/atualizar sess√£o de pagamento para {telefone}:")

def marcar_pagamento(
    telefone: str | None = None,
    id_sessao_stripe: str | None = None,
    email_cliente: str | None = None,
    nome_cliente: str | None = None
) -> tuple[datetime | None, str | None]:
    """
    Marca um pagamento como conclu√≠do no banco de dados e tenta agendar a consulta.
    Chamado pelo webhook do Stripe ap√≥s 'checkout.session.completed'.

    Args:
        telefone (str | None): Telefone do usu√°rio (vindo dos metadados do Stripe).
        id_sessao_stripe (str | None): ID da sess√£o de checkout do Stripe.
        email_cliente (str | None): Email do cliente (vindo da sess√£o Stripe).
        nome_cliente (str | None): Nome do cliente (vindo da sess√£o Stripe ou metadados).

    Returns:
        tuple[datetime | None, str | None]:
            - horario_agendado_utc: O hor√°rio UTC da consulta agendada, ou None se falhar.
            - nome_final: O nome usado para o agendamento.
    """
    if pagamentos_db is None:
        logging.error("FOLLOWUP: ‚ùå Falha ao marcar pagamento: DB indispon√≠vel.")
        return None, None

    # Precisa do id_sessao para garantir que estamos atualizando o pagamento correto
    if not id_sessao_stripe:
        logging.error("FOLLOWUP: ‚ùå Falha ao marcar pagamento: ID da sess√£o Stripe ausente.")
        # Poderia tentar buscar por telefone, mas √© arriscado se houver links antigos
        return None, None

    # Monta o filtro para encontrar o registro da sess√£o de pagamento pelo ID
    filtro = {"id_sessao_stripe": id_sessao_stripe}

    try:
        agora_utc = datetime.now(timezone.utc)
        # Dados para atualizar o registro
        update_data = {
            "$set": {
                "status": "pago", # Marca como pago
                "pago_em": agora_utc,
                "ultima_atualizacao": agora_utc,
                "email_stripe": email_cliente,
                # Atualiza telefone e nome se vieram do Stripe (podem ter sido preenchidos l√°)
                "telefone": telefone if telefone else "$telefone", # Mant√©m o original se n√£o veio
                "nome": nome_cliente if nome_cliente else "$nome" # Mant√©m o original se n√£o veio
            }
        }

        # Encontra e atualiza o registro do pagamento
        # Retorna o documento AP√ìS a atualiza√ß√£o para pegar os dados mais recentes
        pagamento_atualizado = pagamentos_db.find_one_and_update(
            filtro,
            update_data,
            return_document=ReturnDocument.AFTER # Pega o documento atualizado
        )

        if pagamento_atualizado:
            logging.info(f"FOLLOWUP: üí∞ Pagamento confirmado para sess√£o {id_sessao_stripe} (Telefone: {pagamento_atualizado.get('telefone')}).")
            # Usa os dados atualizados para agendar
            tel_para_agendar = pagamento_atualizado.get('telefone')
            nome_para_agendar = pagamento_atualizado.get('nome', 'Cliente')
            email_para_agendar = pagamento_atualizado.get('email_stripe') # Usa o email do Stripe

            # Verifica se temos telefone para agendar
            if not tel_para_agendar:
                 logging.error(f"FOLLOWUP: ‚ùå Telefone ausente no registro de pagamento {id_sessao_stripe} ap√≥s atualiza√ß√£o. N√£o √© poss√≠vel agendar.")
                 return None, nome_para_agendar # Retorna nome para poss√≠vel notifica√ß√£o

            # --- Tenta Agendar a Consulta ---
            logging.info(f"FOLLOWUP: Tentando agendar consulta para {nome_para_agendar} ({tel_para_agendar})...")
            horario_agendado_utc = agendar_consulta(
                telefone=tel_para_agendar,
                nome=nome_para_agendar,
                email=email_para_agendar
            )

            if horario_agendado_utc:
                logging.info(f"FOLLOWUP: ‚úÖ Consulta agendada com sucesso para {tel_para_agendar} em {formatar_horario_local(horario_agendado_utc)}.")
                # Salva o hor√°rio agendado no registro de pagamento
                pagamentos_db.update_one(
                    {"_id": pagamento_atualizado["_id"]},
                    {"$set": {"horario_consulta_agendada_utc": horario_agendado_utc, "status": "agendado"}} # Atualiza status final
                )
                return horario_agendado_utc, nome_para_agendar
            else:
                logging.error(f"FOLLOWUP: ‚ùå Falha ao agendar consulta para {tel_para_agendar} ap√≥s pagamento.")
                # O pagamento foi marcado, mas o agendamento falhou. Requer aten√ß√£o manual.
                pagamentos_db.update_one(
                     {"_id": pagamento_atualizado["_id"]},
                     {"$set": {"status": "pago_erro_agendamento"}} # Marca status especial
                )
                return None, nome_para_agendar # Retorna None para hor√°rio, mas nome para poss√≠vel notifica√ß√£o
        else:
            logging.warning(f"FOLLOWUP: ‚ö†Ô∏è Nenhum registro de pagamento encontrado para ID Sess√£o Stripe: {id_sessao_stripe}. Pagamento pode j√° ter sido processado ou ID inv√°lido.")
            return None, None

    except Exception as e:
        logging.exception(f"FOLLOWUP: ‚ùå ERRO CR√çTICO ao marcar pagamento/agendar para ID Sess√£o {id_sessao_stripe}:")
        return None, None

# TODO: Adicionar fun√ß√£o para checar follow-ups (ex: pagamentos com link_gerado > X horas) se necess√°rio.
# async def checar_followups(): ...

